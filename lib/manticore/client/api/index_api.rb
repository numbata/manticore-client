=begin
#Manticore Search Client

#Ð¡lient for Manticore Search. 

The version of the OpenAPI document: 5.0.0
Contact: info@manticoresearch.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module Manticore::Client
  class IndexApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk table operations
    # Sends multiple operatons like inserts, updates, replaces or deletes.  For each operation it's object must have same format as in their dedicated method.  The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n).      An example of raw input:      ```   {\"insert\": {\"table\": \"movies\", \"doc\": {\"plot\": \"A secret team goes to North Pole\", \"rating\": 9.5, \"language\": [2, 3], \"title\": \"This is an older movie\", \"lon\": 51.99, \"meta\": {\"keywords\":[\"travel\",\"ice\"],\"genre\":[\"adventure\"]}, \"year\": 1950, \"lat\": 60.4, \"advise\": \"PG-13\"}}}   \\n   {\"delete\": {\"table\": \"movies\",\"id\":700}}   ```      Responds with an object telling whenever any errors occured and an array with status for each operation:      ```   {     'items':     [       {         'update':{'table':'products','id':1,'result':'updated'}       },       {         'update':{'table':'products','id':2,'result':'updated'}       }     ],     'errors':false   }   ``` 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [BulkResponse]
    def bulk(body, opts = {})
      data, _status_code, _headers = bulk_with_http_info(body, opts)
      data
    end

    # Bulk table operations
    # Sends multiple operatons like inserts, updates, replaces or deletes.  For each operation it&#39;s object must have same format as in their dedicated method.  The method expects a raw string as the batch in NDJSON.  Each operation object needs to be serialized to   JSON and separated by endline (\\n).      An example of raw input:      &#x60;&#x60;&#x60;   {\&quot;insert\&quot;: {\&quot;table\&quot;: \&quot;movies\&quot;, \&quot;doc\&quot;: {\&quot;plot\&quot;: \&quot;A secret team goes to North Pole\&quot;, \&quot;rating\&quot;: 9.5, \&quot;language\&quot;: [2, 3], \&quot;title\&quot;: \&quot;This is an older movie\&quot;, \&quot;lon\&quot;: 51.99, \&quot;meta\&quot;: {\&quot;keywords\&quot;:[\&quot;travel\&quot;,\&quot;ice\&quot;],\&quot;genre\&quot;:[\&quot;adventure\&quot;]}, \&quot;year\&quot;: 1950, \&quot;lat\&quot;: 60.4, \&quot;advise\&quot;: \&quot;PG-13\&quot;}}}   \\n   {\&quot;delete\&quot;: {\&quot;table\&quot;: \&quot;movies\&quot;,\&quot;id\&quot;:700}}   &#x60;&#x60;&#x60;      Responds with an object telling whenever any errors occured and an array with status for each operation:      &#x60;&#x60;&#x60;   {     &#39;items&#39;:     [       {         &#39;update&#39;:{&#39;table&#39;:&#39;products&#39;,&#39;id&#39;:1,&#39;result&#39;:&#39;updated&#39;}       },       {         &#39;update&#39;:{&#39;table&#39;:&#39;products&#39;,&#39;id&#39;:2,&#39;result&#39;:&#39;updated&#39;}       }     ],     &#39;errors&#39;:false   }   &#x60;&#x60;&#x60; 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkResponse, Integer, Hash)>] BulkResponse data, response status code and response headers
    def bulk_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.bulk ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IndexApi.bulk"
      end
      # resource path
      local_var_path = '/bulk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-ndjson'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BulkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IndexApi.bulk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a document in a table
    # Delete one or several documents. The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . Example of input to delete by id:    ```   {'table':'movies','id':100}   ```  Example of input to delete using a query:    ```   {     'table':'movies',     'query':     {       'bool':       {         'must':         [           {'query_string':'new movie'}         ]       }     }   }   ```  The match query has same syntax as in for searching. Responds with an object telling how many documents got deleted:     ```   {'table':'products','updated':1}   ``` 
    # @param delete_document_request [DeleteDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def delete(delete_document_request, opts = {})
      data, _status_code, _headers = delete_with_http_info(delete_document_request, opts)
      data
    end

    # Delete a document in a table
    # Delete one or several documents. The method has 2 ways of deleting: either by id, in case only one document is deleted or by using a  match query, in which case multiple documents can be delete . Example of input to delete by id:    &#x60;&#x60;&#x60;   {&#39;table&#39;:&#39;movies&#39;,&#39;id&#39;:100}   &#x60;&#x60;&#x60;  Example of input to delete using a query:    &#x60;&#x60;&#x60;   {     &#39;table&#39;:&#39;movies&#39;,     &#39;query&#39;:     {       &#39;bool&#39;:       {         &#39;must&#39;:         [           {&#39;query_string&#39;:&#39;new movie&#39;}         ]       }     }   }   &#x60;&#x60;&#x60;  The match query has same syntax as in for searching. Responds with an object telling how many documents got deleted:     &#x60;&#x60;&#x60;   {&#39;table&#39;:&#39;products&#39;,&#39;updated&#39;:1}   &#x60;&#x60;&#x60; 
    # @param delete_document_request [DeleteDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def delete_with_http_info(delete_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.delete ...'
      end
      # verify the required parameter 'delete_document_request' is set
      if @api_client.config.client_side_validation && delete_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'delete_document_request' when calling IndexApi.delete"
      end
      # resource path
      local_var_path = '/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(delete_document_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IndexApi.delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new document in a table
    # Insert a document.  Expects an object like:     ```   {     'table':'movies',     'id':701,     'doc':     {       'title':'This is an old movie',       'plot':'A secret team goes to North Pole',       'year':1950,       'rating':9.5,       'lat':60.4,       'lon':51.99,       'advise':'PG-13',       'meta':'{\"keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}',       'language':[2,3]     }   }   ```   The document id can also be missing, in which case an autogenerated one will be used:             ```   {     'table':'movies',     'doc':     {       'title':'This is a new movie',       'plot':'A secret team goes to North Pole',       'year':2020,       'rating':9.5,       'lat':60.4,       'lon':51.99,       'advise':'PG-13',       'meta':'{\"keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}',       'language':[2,3]     }   }   ```   It responds with an object in format:      ```   {'table':'products','id':701,'created':true,'result':'created','status':201}   ``` 
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def insert(insert_document_request, opts = {})
      data, _status_code, _headers = insert_with_http_info(insert_document_request, opts)
      data
    end

    # Create a new document in a table
    # Insert a document.  Expects an object like:     &#x60;&#x60;&#x60;   {     &#39;table&#39;:&#39;movies&#39;,     &#39;id&#39;:701,     &#39;doc&#39;:     {       &#39;title&#39;:&#39;This is an old movie&#39;,       &#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,       &#39;year&#39;:1950,       &#39;rating&#39;:9.5,       &#39;lat&#39;:60.4,       &#39;lon&#39;:51.99,       &#39;advise&#39;:&#39;PG-13&#39;,       &#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,       &#39;language&#39;:[2,3]     }   }   &#x60;&#x60;&#x60;   The document id can also be missing, in which case an autogenerated one will be used:             &#x60;&#x60;&#x60;   {     &#39;table&#39;:&#39;movies&#39;,     &#39;doc&#39;:     {       &#39;title&#39;:&#39;This is a new movie&#39;,       &#39;plot&#39;:&#39;A secret team goes to North Pole&#39;,       &#39;year&#39;:2020,       &#39;rating&#39;:9.5,       &#39;lat&#39;:60.4,       &#39;lon&#39;:51.99,       &#39;advise&#39;:&#39;PG-13&#39;,       &#39;meta&#39;:&#39;{\&quot;keywords\&quot;:{\&quot;travel\&quot;,\&quot;ice\&quot;},\&quot;genre\&quot;:{\&quot;adventure\&quot;}}&#39;,       &#39;language&#39;:[2,3]     }   }   &#x60;&#x60;&#x60;   It responds with an object in format:      &#x60;&#x60;&#x60;   {&#39;table&#39;:&#39;products&#39;,&#39;id&#39;:701,&#39;created&#39;:true,&#39;result&#39;:&#39;created&#39;,&#39;status&#39;:201}   &#x60;&#x60;&#x60; 
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def insert_with_http_info(insert_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.insert ...'
      end
      # verify the required parameter 'insert_document_request' is set
      if @api_client.config.client_side_validation && insert_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'insert_document_request' when calling IndexApi.insert"
      end
      # resource path
      local_var_path = '/insert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(insert_document_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IndexApi.insert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#insert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Partially replaces a document in a table
    # Partially replaces a document with given id in a table Responds with an object of the following format:     ```   {'table':'products','updated':1}   ``` 
    # @param table [String] Name of the percolate table
    # @param id [Integer] Id of the document to replace
    # @param replace_document_request [ReplaceDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateResponse]
    def partial_replace(table, id, replace_document_request, opts = {})
      data, _status_code, _headers = partial_replace_with_http_info(table, id, replace_document_request, opts)
      data
    end

    # Partially replaces a document in a table
    # Partially replaces a document with given id in a table Responds with an object of the following format:     &#x60;&#x60;&#x60;   {&#39;table&#39;:&#39;products&#39;,&#39;updated&#39;:1}   &#x60;&#x60;&#x60; 
    # @param table [String] Name of the percolate table
    # @param id [Integer] Id of the document to replace
    # @param replace_document_request [ReplaceDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateResponse, Integer, Hash)>] UpdateResponse data, response status code and response headers
    def partial_replace_with_http_info(table, id, replace_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.partial_replace ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling IndexApi.partial_replace"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IndexApi.partial_replace"
      end
      # verify the required parameter 'replace_document_request' is set
      if @api_client.config.client_side_validation && replace_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_document_request' when calling IndexApi.partial_replace"
      end
      # resource path
      local_var_path = '/{table}/_update/{id}'.sub('{' + 'table' + '}', CGI.escape(table.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_document_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IndexApi.partial_replace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#partial_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace new document in a table
    # Replace an existing document. Input has same format as `insert` operation. Responds with an object in format:    ```   {'table':'products','id':1,'created':false,'result':'updated','status':200}   ``` 
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def replace(insert_document_request, opts = {})
      data, _status_code, _headers = replace_with_http_info(insert_document_request, opts)
      data
    end

    # Replace new document in a table
    # Replace an existing document. Input has same format as &#x60;insert&#x60; operation. Responds with an object in format:    &#x60;&#x60;&#x60;   {&#39;table&#39;:&#39;products&#39;,&#39;id&#39;:1,&#39;created&#39;:false,&#39;result&#39;:&#39;updated&#39;,&#39;status&#39;:200}   &#x60;&#x60;&#x60; 
    # @param insert_document_request [InsertDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def replace_with_http_info(insert_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.replace ...'
      end
      # verify the required parameter 'insert_document_request' is set
      if @api_client.config.client_side_validation && insert_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'insert_document_request' when calling IndexApi.replace"
      end
      # resource path
      local_var_path = '/replace'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(insert_document_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IndexApi.replace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a document in a table
    # Update one or several documents. The update can be made by passing the id or by using a match query in case multiple documents can be updated.  For example update a document using document id:    ```   {'table':'movies','doc':{'rating':9.49},'id':100}   ```  And update by using a match query:    ```   {     'table':'movies',     'doc':{'rating':9.49},     'query':     {       'bool':       {         'must':         [           {'query_string':'new movie'}         ]       }     }   }   ```   The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format:     ```   {'table':'products','updated':1}   ``` 
    # @param update_document_request [UpdateDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateResponse]
    def update(update_document_request, opts = {})
      data, _status_code, _headers = update_with_http_info(update_document_request, opts)
      data
    end

    # Update a document in a table
    # Update one or several documents. The update can be made by passing the id or by using a match query in case multiple documents can be updated.  For example update a document using document id:    &#x60;&#x60;&#x60;   {&#39;table&#39;:&#39;movies&#39;,&#39;doc&#39;:{&#39;rating&#39;:9.49},&#39;id&#39;:100}   &#x60;&#x60;&#x60;  And update by using a match query:    &#x60;&#x60;&#x60;   {     &#39;table&#39;:&#39;movies&#39;,     &#39;doc&#39;:{&#39;rating&#39;:9.49},     &#39;query&#39;:     {       &#39;bool&#39;:       {         &#39;must&#39;:         [           {&#39;query_string&#39;:&#39;new movie&#39;}         ]       }     }   }   &#x60;&#x60;&#x60;   The match query has same syntax as for searching. Responds with an object that tells how many documents where updated in format:     &#x60;&#x60;&#x60;   {&#39;table&#39;:&#39;products&#39;,&#39;updated&#39;:1}   &#x60;&#x60;&#x60; 
    # @param update_document_request [UpdateDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateResponse, Integer, Hash)>] UpdateResponse data, response status code and response headers
    def update_with_http_info(update_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.update ...'
      end
      # verify the required parameter 'update_document_request' is set
      if @api_client.config.client_side_validation && update_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_document_request' when calling IndexApi.update"
      end
      # resource path
      local_var_path = '/update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_document_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"IndexApi.update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
