=begin
#Manticore Search Client

#Ð¡lient for Manticore Search. 

The version of the OpenAPI document: 5.0.0
Contact: info@manticoresearch.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module Manticore::Client
  class Highlight
    # Maximum size of the text fragments in highlighted snippets per field
    attr_accessor :fragment_size

    # Maximum size of snippets per field
    attr_accessor :limit

    # Maximum number of snippets per field
    attr_accessor :limit_snippets

    # Maximum number of words per field
    attr_accessor :limit_words

    # Total number of highlighted fragments per field
    attr_accessor :number_of_fragments

    # Text inserted after the matched term, typically used for HTML formatting
    attr_accessor :after_match

    # Permits an empty string to be returned as the highlighting result. Otherwise, the beginning of the original text would be returned
    attr_accessor :allow_empty

    # Number of words around the match to include in the highlight
    attr_accessor :around

    # Text inserted before the match, typically used for HTML formatting
    attr_accessor :before_match

    # Emits an HTML tag with the enclosing zone name before each highlighted snippet
    attr_accessor :emit_zones

    # If set to 'html', retains HTML markup when highlighting
    attr_accessor :encoder

    attr_accessor :fields

    # Ignores the length limit until the result includes all keywords
    attr_accessor :force_all_words

    # Forces snippet generation even if limits allow highlighting the entire text
    attr_accessor :force_snippets

    attr_accessor :highlight_query

    # Defines the mode for handling HTML markup in the highlight
    attr_accessor :html_strip_mode

    # Determines whether the 'limit', 'limit_words', and 'limit_snippets' options operate as individual limits in each field of the document
    attr_accessor :limits_per_field

    # If set to 1, allows an empty string to be returned as a highlighting result
    attr_accessor :no_match_size

    # Sets the sorting order of highlighted snippets
    attr_accessor :order

    # Text inserted before each highlighted snippet
    attr_accessor :pre_tags

    # Text inserted after each highlighted snippet
    attr_accessor :post_tags

    # Sets the starting value of the %SNIPPET_ID% macro
    attr_accessor :start_snippet_id

    # Defines whether to additionally break snippets by phrase boundary characters
    attr_accessor :use_boundaries

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fragment_size' => :'fragment_size',
        :'limit' => :'limit',
        :'limit_snippets' => :'limit_snippets',
        :'limit_words' => :'limit_words',
        :'number_of_fragments' => :'number_of_fragments',
        :'after_match' => :'after_match',
        :'allow_empty' => :'allow_empty',
        :'around' => :'around',
        :'before_match' => :'before_match',
        :'emit_zones' => :'emit_zones',
        :'encoder' => :'encoder',
        :'fields' => :'fields',
        :'force_all_words' => :'force_all_words',
        :'force_snippets' => :'force_snippets',
        :'highlight_query' => :'highlight_query',
        :'html_strip_mode' => :'html_strip_mode',
        :'limits_per_field' => :'limits_per_field',
        :'no_match_size' => :'no_match_size',
        :'order' => :'order',
        :'pre_tags' => :'pre_tags',
        :'post_tags' => :'post_tags',
        :'start_snippet_id' => :'start_snippet_id',
        :'use_boundaries' => :'use_boundaries'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'fragment_size' => :'Integer',
        :'limit' => :'Integer',
        :'limit_snippets' => :'Integer',
        :'limit_words' => :'Integer',
        :'number_of_fragments' => :'Integer',
        :'after_match' => :'String',
        :'allow_empty' => :'Boolean',
        :'around' => :'Integer',
        :'before_match' => :'String',
        :'emit_zones' => :'Boolean',
        :'encoder' => :'String',
        :'fields' => :'HighlightAllOfFields',
        :'force_all_words' => :'Boolean',
        :'force_snippets' => :'Boolean',
        :'highlight_query' => :'QueryFilter',
        :'html_strip_mode' => :'String',
        :'limits_per_field' => :'Boolean',
        :'no_match_size' => :'Integer',
        :'order' => :'String',
        :'pre_tags' => :'String',
        :'post_tags' => :'String',
        :'start_snippet_id' => :'Integer',
        :'use_boundaries' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'highlight_query',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'HighlightFieldOption'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Manticore::Client::Highlight` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Manticore::Client::Highlight`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'fragment_size')
        self.fragment_size = attributes[:'fragment_size']
      end

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.key?(:'limit_snippets')
        self.limit_snippets = attributes[:'limit_snippets']
      end

      if attributes.key?(:'limit_words')
        self.limit_words = attributes[:'limit_words']
      end

      if attributes.key?(:'number_of_fragments')
        self.number_of_fragments = attributes[:'number_of_fragments']
      end

      if attributes.key?(:'after_match')
        self.after_match = attributes[:'after_match']
      else
        self.after_match = '</strong>'
      end

      if attributes.key?(:'allow_empty')
        self.allow_empty = attributes[:'allow_empty']
      end

      if attributes.key?(:'around')
        self.around = attributes[:'around']
      end

      if attributes.key?(:'before_match')
        self.before_match = attributes[:'before_match']
      else
        self.before_match = '<strong>'
      end

      if attributes.key?(:'emit_zones')
        self.emit_zones = attributes[:'emit_zones']
      end

      if attributes.key?(:'encoder')
        self.encoder = attributes[:'encoder']
      end

      if attributes.key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.key?(:'force_all_words')
        self.force_all_words = attributes[:'force_all_words']
      end

      if attributes.key?(:'force_snippets')
        self.force_snippets = attributes[:'force_snippets']
      end

      if attributes.key?(:'highlight_query')
        self.highlight_query = attributes[:'highlight_query']
      end

      if attributes.key?(:'html_strip_mode')
        self.html_strip_mode = attributes[:'html_strip_mode']
      end

      if attributes.key?(:'limits_per_field')
        self.limits_per_field = attributes[:'limits_per_field']
      end

      if attributes.key?(:'no_match_size')
        self.no_match_size = attributes[:'no_match_size']
      end

      if attributes.key?(:'order')
        self.order = attributes[:'order']
      end

      if attributes.key?(:'pre_tags')
        self.pre_tags = attributes[:'pre_tags']
      else
        self.pre_tags = '<strong>'
      end

      if attributes.key?(:'post_tags')
        self.post_tags = attributes[:'post_tags']
      else
        self.post_tags = '</strong>'
      end

      if attributes.key?(:'start_snippet_id')
        self.start_snippet_id = attributes[:'start_snippet_id']
      end

      if attributes.key?(:'use_boundaries')
        self.use_boundaries = attributes[:'use_boundaries']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      encoder_validator = EnumAttributeValidator.new('String', ["default", "html"])
      return false unless encoder_validator.valid?(@encoder)
      html_strip_mode_validator = EnumAttributeValidator.new('String', ["none", "strip", "index", "retain"])
      return false unless html_strip_mode_validator.valid?(@html_strip_mode)
      no_match_size_validator = EnumAttributeValidator.new('Integer', [0, 1])
      return false unless no_match_size_validator.valid?(@no_match_size)
      order_validator = EnumAttributeValidator.new('String', ["asc", "desc", "score"])
      return false unless order_validator.valid?(@order)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] encoder Object to be assigned
    def encoder=(encoder)
      validator = EnumAttributeValidator.new('String', ["default", "html"])
      unless validator.valid?(encoder)
        fail ArgumentError, "invalid value for \"encoder\", must be one of #{validator.allowable_values}."
      end
      @encoder = encoder
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] html_strip_mode Object to be assigned
    def html_strip_mode=(html_strip_mode)
      validator = EnumAttributeValidator.new('String', ["none", "strip", "index", "retain"])
      unless validator.valid?(html_strip_mode)
        fail ArgumentError, "invalid value for \"html_strip_mode\", must be one of #{validator.allowable_values}."
      end
      @html_strip_mode = html_strip_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] no_match_size Object to be assigned
    def no_match_size=(no_match_size)
      validator = EnumAttributeValidator.new('Integer', [0, 1])
      unless validator.valid?(no_match_size)
        fail ArgumentError, "invalid value for \"no_match_size\", must be one of #{validator.allowable_values}."
      end
      @no_match_size = no_match_size
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] order Object to be assigned
    def order=(order)
      validator = EnumAttributeValidator.new('String', ["asc", "desc", "score"])
      unless validator.valid?(order)
        fail ArgumentError, "invalid value for \"order\", must be one of #{validator.allowable_values}."
      end
      @order = order
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fragment_size == o.fragment_size &&
          limit == o.limit &&
          limit_snippets == o.limit_snippets &&
          limit_words == o.limit_words &&
          number_of_fragments == o.number_of_fragments &&
          after_match == o.after_match &&
          allow_empty == o.allow_empty &&
          around == o.around &&
          before_match == o.before_match &&
          emit_zones == o.emit_zones &&
          encoder == o.encoder &&
          fields == o.fields &&
          force_all_words == o.force_all_words &&
          force_snippets == o.force_snippets &&
          highlight_query == o.highlight_query &&
          html_strip_mode == o.html_strip_mode &&
          limits_per_field == o.limits_per_field &&
          no_match_size == o.no_match_size &&
          order == o.order &&
          pre_tags == o.pre_tags &&
          post_tags == o.post_tags &&
          start_snippet_id == o.start_snippet_id &&
          use_boundaries == o.use_boundaries
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [fragment_size, limit, limit_snippets, limit_words, number_of_fragments, after_match, allow_empty, around, before_match, emit_zones, encoder, fields, force_all_words, force_snippets, highlight_query, html_strip_mode, limits_per_field, no_match_size, order, pre_tags, post_tags, start_snippet_id, use_boundaries].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Manticore::Client.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
