=begin
#Manticore Search Client

#Ð¡lient for Manticore Search. 

The version of the OpenAPI document: 5.0.0
Contact: info@manticoresearch.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module Manticore::Client
  # Defines a query structure for performing search operations
  class SearchQuery
    # Filter object defining a query string
    attr_accessor :query_string

    # Filter object defining a match keyword passed as a string or in a Match object
    attr_accessor :match

    # Filter object defining a match phrase
    attr_accessor :match_phrase

    # Filter object to select all documents
    attr_accessor :match_all

    attr_accessor :bool

    attr_accessor :equals

    # Filter to match a given set of attribute values.
    attr_accessor :_in

    # Filter to match a given range of attribute values passed in Range objects
    attr_accessor :range

    attr_accessor :geo_distance

    attr_accessor :highlight

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'query_string' => :'query_string',
        :'match' => :'match',
        :'match_phrase' => :'match_phrase',
        :'match_all' => :'match_all',
        :'bool' => :'bool',
        :'equals' => :'equals',
        :'_in' => :'in',
        :'range' => :'range',
        :'geo_distance' => :'geo_distance',
        :'highlight' => :'highlight'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'query_string' => :'String',
        :'match' => :'Object',
        :'match_phrase' => :'Object',
        :'match_all' => :'Object',
        :'bool' => :'BoolFilter',
        :'equals' => :'Object',
        :'_in' => :'Object',
        :'range' => :'Object',
        :'geo_distance' => :'GeoDistance',
        :'highlight' => :'Highlight'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'equals',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'QueryFilter'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Manticore::Client::SearchQuery` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Manticore::Client::SearchQuery`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'query_string')
        self.query_string = attributes[:'query_string']
      end

      if attributes.key?(:'match')
        self.match = attributes[:'match']
      end

      if attributes.key?(:'match_phrase')
        self.match_phrase = attributes[:'match_phrase']
      end

      if attributes.key?(:'match_all')
        self.match_all = attributes[:'match_all']
      end

      if attributes.key?(:'bool')
        self.bool = attributes[:'bool']
      end

      if attributes.key?(:'equals')
        self.equals = attributes[:'equals']
      end

      if attributes.key?(:'_in')
        self._in = attributes[:'_in']
      end

      if attributes.key?(:'range')
        self.range = attributes[:'range']
      end

      if attributes.key?(:'geo_distance')
        self.geo_distance = attributes[:'geo_distance']
      end

      if attributes.key?(:'highlight')
        self.highlight = attributes[:'highlight']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          query_string == o.query_string &&
          match == o.match &&
          match_phrase == o.match_phrase &&
          match_all == o.match_all &&
          bool == o.bool &&
          equals == o.equals &&
          _in == o._in &&
          range == o.range &&
          geo_distance == o.geo_distance &&
          highlight == o.highlight
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [query_string, match, match_phrase, match_all, bool, equals, _in, range, geo_distance, highlight].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Manticore::Client.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
