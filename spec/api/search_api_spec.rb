=begin
#Manticore Search Client

#Ð¡lient for Manticore Search. 

The version of the OpenAPI document: 5.0.0
Contact: info@manticoresearch.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Manticore::Client::SearchApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SearchApi' do
  before do
    # run before each test
    @api_instance = Manticore::Client::SearchApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SearchApi' do
    it 'should create an instance of SearchApi' do
      expect(@api_instance).to be_instance_of(Manticore::Client::SearchApi)
    end
  end

  # unit tests for autocomplete
  # Performs an autocomplete search on a table
  #  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
  # @param autocomplete_request 
  # @param [Hash] opts the optional parameters
  # @return [Array<Object>]
  describe 'autocomplete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for percolate
  # Perform reverse search on a percolate table
  # Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
  # @param table Name of the percolate table
  # @param percolate_request 
  # @param [Hash] opts the optional parameters
  # @return [SearchResponse]
  describe 'percolate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search
  # Performs a search on a table
  #  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
  # @param search_request 
  # @param [Hash] opts the optional parameters
  # @return [SearchResponse]
  describe 'search test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
